// GENERATED BY events_gen.go
// DO NOT MODIFY MANUALLY
package trace

func NewEventByCode(code byte) Event {
	switch code {
	case 0x00:
		return &Invalid{}
	case 0x01:
		return &StreamStart{}
	case 0x02:
		return &StreamStop{}
	case 0x03:
		return &ThreadStart{}
	case 0x04:
		return &ThreadSleep{}
	case 0x05:
		return &ThreadWake{}
	case 0x06:
		return &ThreadStop{}
	case 0x07:
		return &Begin{}
	case 0x08:
		return &End{}
	case 0x09:
		return &Start{}
	case 0x0A:
		return &Finish{}
	case 0x0C:
		return &Snapshot{}
	case 0x0D:
		return &Info{}
	}
	panic("unknown code")
}
func (ev *Invalid) Code() byte { return 0x00 }
func (ev *Invalid) ReadFrom(r *Reader) {
}
func (ev *Invalid) WriteTo(w *Writer) {
}
func (ev *StreamStart) Code() byte { return 0x01 }
func (ev *StreamStart) ReadFrom(r *Reader) {
	ev.ProcessID = r.readID()
	ev.MachineID = r.readID()
	ev.Time = r.readTime()
	ev.Freq = r.readFreq()
}
func (ev *StreamStart) WriteTo(w *Writer) {
	w.writeID(ev.ProcessID)
	w.writeID(ev.MachineID)
	w.writeTime(ev.Time)
	w.writeFreq(ev.Freq)
}
func (ev *StreamStop) Code() byte { return 0x02 }
func (ev *StreamStop) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
}
func (ev *StreamStop) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
}
func (ev *ThreadStart) Code() byte { return 0x03 }
func (ev *ThreadStart) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
}
func (ev *ThreadStart) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
}
func (ev *ThreadSleep) Code() byte { return 0x04 }
func (ev *ThreadSleep) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
}
func (ev *ThreadSleep) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
}
func (ev *ThreadWake) Code() byte { return 0x05 }
func (ev *ThreadWake) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
}
func (ev *ThreadWake) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
}
func (ev *ThreadStop) Code() byte { return 0x06 }
func (ev *ThreadStop) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
}
func (ev *ThreadStop) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
}
func (ev *Begin) Code() byte { return 0x07 }
func (ev *Begin) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
	ev.ID = r.readID()
}
func (ev *Begin) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
	w.writeID(ev.ID)
}
func (ev *End) Code() byte { return 0x08 }
func (ev *End) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
	ev.ID = r.readID()
}
func (ev *End) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
	w.writeID(ev.ID)
}
func (ev *Start) Code() byte { return 0x09 }
func (ev *Start) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
	ev.ID = r.readID()
}
func (ev *Start) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
	w.writeID(ev.ID)
}
func (ev *Finish) Code() byte { return 0x0A }
func (ev *Finish) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
	ev.ID = r.readID()
}
func (ev *Finish) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
	w.writeID(ev.ID)
}
func (ev *Snapshot) Code() byte { return 0x0C }
func (ev *Snapshot) ReadFrom(r *Reader) {
	ev.Time = r.readTime()
	ev.ThreadID = r.readID()
	ev.StackID = r.readID()
	ev.ID = r.readID()
	ev.Kind = r.readKind()
	ev.Content = r.readBytes()
}
func (ev *Snapshot) WriteTo(w *Writer) {
	w.writeTime(ev.Time)
	w.writeID(ev.ThreadID)
	w.writeID(ev.StackID)
	w.writeID(ev.ID)
	w.writeKind(ev.Kind)
	w.writeBytes(ev.Content)
}
func (ev *Info) Code() byte { return 0x0D }
func (ev *Info) ReadFrom(r *Reader) {
	ev.ID = r.readID()
	ev.Name = r.readString()
	ev.Kind = r.readKind()
	ev.Content = r.readBytes()
}
func (ev *Info) WriteTo(w *Writer) {
	w.writeID(ev.ID)
	w.writeString(ev.Name)
	w.writeKind(ev.Kind)
	w.writeBytes(ev.Content)
}
